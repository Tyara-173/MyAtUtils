# from Crypto.Util.number import getPrime
# from secret import flag
from random import getrandbits

import gmpy2

# p = getPrime(512)
# q = getPrime(512)

# m = int.from_bytes(flag.encode(), "big")

# n = p * q
# e = 65537
# c = pow(m, e, n)

# phi = (p + 1) * (q + 1)

# print(f"n: {n}")
# print(f"e: {e}")
# print(f"c: {c}")
# print(f"\"phi\": {phi}")

"""
n: 86088719452932625928188797700212036385645851492281481088289877829109110203124545852827976798704364393182426900932380436551569867036871171400190786913084554536903236375579771401257801115918586590639686117179685431627540567894983403579070366895343181435791515535593260495162656111028487919107927692512155290673
e: 65537
c: 64457111821105649174362298452450091137161142479679349324820456191542295609033025036769398863050668733308827861582321665479620448998471034645792165920115009947792955402994892700435507896792829140545387740663865218579313148804819896796193817727423074201660305082597780007494535370991899386707740199516316196758
"phi": 86088719452932625928188797700212036385645851492281481088289877829109110203124545852827976798704364393182426900932380436551569867036871171400190786913084573410416063246853198167436938724585247461433706053188624379514833802770205501907568228388536548010385588837258085711058519777393945044905741975952241886308
"""

# n = 86088719452932625928188797700212036385645851492281481088289877829109110203124545852827976798704364393182426900932380436551569867036871171400190786913084554536903236375579771401257801115918586590639686117179685431627540567894983403579070366895343181435791515535593260495162656111028487919107927692512155290673
# c = 64457111821105649174362298452450091137161142479679349324820456191542295609033025036769398863050668733308827861582321665479620448998471034645792165920115009947792955402994892700435507896792829140545387740663865218579313148804819896796193817727423074201660305082597780007494535370991899386707740199516316196758
# phi = 86088719452932625928188797700212036385645851492281481088289877829109110203124545852827976798704364393182426900932380436551569867036871171400190786913084573410416063246853198167436938724585247461433706053188624379514833802770205501907568228388536548010385588837258085711058519777393945044905741975952241886308
# e = 65537
# # print(n - phi + c)
#
# pq = phi - n - 1
# l = n - pq + 1
#
# d = pow(e,-1,l)
#
# t = pow(c,d,n)
#
# m = t.to_bytes(39,"big")
# print(m)

# e = 2
# p = getPrime(256)
# q = getPrime(256)
# n = p * q

# m = bytes_to_long(FLAG)
# cor_m = m - getrandbits(160)
# c = pow(m, e, n)
def int_to_bytes(x: int) -> bytes:
    return x.to_bytes((x.bit_length()+7)//8, 'big')


def LPA(c, e, n):
    while(True):
        m, b = gmpy2.iroot(c, e)
        if b:
            break
        else:
            c += n
    return int(m)

n = 5113166966960118603250666870544315753374750136060769465485822149528706374700934720443689630473991177661169179462100732951725871457633686010946951736764639
c = 329402637167950119278220170950190680807120980712143610290182242567212843996710001488280098771626903975534140478814872389359418514658167263670496584963653
cor_m = 724154397787031699242933363312913323086319394176220093419616667612889538090840511507392245976984201647543870740055095781645802588721
e = 2
# m = 2467102511211472506661358034285174122841747013673511967277587335218633888412443123406206110309682848788519753448752727822319237696304488932665659540186709
nhalf = 2556583483480059301625333435272157876687375068030384732742911074764353187350467360221844815236995588830584589731050366475862935728816843005473475868382320
max_m = 724154397787031699242933363312913323086319394176220093419616667612889538090840511508853747614315104565747555572771378801301735131696
# print(pow(c,nhalf,n) - cor_m)
# t = pow(c, d, n)
m = cor_m.to_bytes(55)
t = int.from_bytes(m[34:-1])
tt = int.bit_length(t)
ttt = bin(t)[8:-1]
# print(int(ttt,2))
# mm = pow(c,pow(e,-1,n),n)

# decode()に合わせるためにmをバイト列に直す
m = LPA(c, e, n)
# 整数mをバイト列に変換した後でコードして文字間をつめる
flag = int_to_bytes(m).decode().strip()
print(flag)

